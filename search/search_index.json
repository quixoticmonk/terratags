{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Terratags","text":"<p>Terratags is a tool for validating tags on AWS resources in Terraform configurations.</p>"},{"location":"#overview","title":"Overview","text":"<p>Consistent tagging is crucial for:</p> <ul> <li>Cost allocation and tracking</li> <li>Resource ownership identification</li> <li>Environment classification</li> <li>Security and compliance requirements</li> <li>Automation and resource management</li> </ul> <p>Terratags helps enforce these tagging standards across your infrastructure, ensuring that all resources are properly tagged according to your organization's policies.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Tag Validation: Validates required tags on AWS resources</li> <li>Default Tags Support: Supports AWS provider default_tags</li> <li>Module-Level Tags: Supports module-level tags</li> <li>Exemption Support: Supports exemptions for specific resources</li> <li>HTML Reports: Generates HTML reports of tag compliance</li> <li>Auto-Remediation: Provides auto-remediation suggestions</li> <li>Plan Integration: Integrates with Terraform plan output</li> <li>Tag Inheritance: Tracks tag inheritance from provider default_tags</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>go install github.com/terratags/terratags@latest\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>terratags -config config.yaml -dir ./terraform\n</code></pre> <p>Check out the documentation for more detailed information on configuration and usage.</p>"},{"location":"#sample-report","title":"Sample Report","text":"<p>When you generate an HTML report with Terratags, it will look similar to this:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Terraform Tag Compliance Report           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Generated on: 2025-05-16                           \u2502\n\u2502                                                     \u2502\n\u2502 Summary:                                            \u2502\n\u2502 \u2713 Total Resources: 4                                \u2502\n\u2502 \u2713 Compliant Resources: 2                            \u2502\n\u2502 \u2717 Non-compliant Resources: 2                        \u2502\n\u2502                                                     \u2502\n\u2502 [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588--------] 50.0%     \u2502\n\u2502                                                     \u2502\n\u2502 Non-compliant Resources:                            \u2502\n\u2502 \u2717 aws_s3_bucket \"data_bucket\"                       \u2502\n\u2502   Missing Tags: Environment, Owner, Project         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The HTML report provides a visual representation of tag compliance across your Terraform resources, making it easy to identify which resources need attention and track compliance metrics.</p>"},{"location":"ci-cd/","title":"CI/CD Integration","text":"<p>Integrating Terratags into your CI/CD pipeline helps enforce tag compliance across your infrastructure. This page provides examples of how to integrate Terratags with popular CI/CD platforms.</p>"},{"location":"ci-cd/#github-actions","title":"GitHub Actions","text":"<p>Add Terratags to your GitHub Actions workflow:</p> <pre><code>name: Validate Tags\n\non:\n  pull_request:\n    paths:\n      - '**.tf'\n\njobs:\n  validate-tags:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: '1.24'\n\n      - name: Install Terratags\n        run: go install github.com/terratags/terratags@latest\n\n      - name: Validate Tags\n        run: terratags -config config.yaml -dir ./terraform\n</code></pre>"},{"location":"ci-cd/#gitlab-ci","title":"GitLab CI","text":"<p>Add Terratags to your GitLab CI pipeline:</p> <pre><code>stages:\n  - validate\n\nvalidate-tags:\n  stage: validate\n  image: golang:1.24\n  script:\n    - go install github.com/terratags/terratags@latest\n    - terratags -config config.yaml -dir ./terraform\n  only:\n    changes:\n      - \"**/*.tf\"\n</code></pre>"},{"location":"ci-cd/#azure-devops","title":"Azure DevOps","text":"<p>Add Terratags to your Azure DevOps pipeline:</p> <pre><code>trigger:\n  paths:\n    include:\n    - '**/*.tf'\n\npool:\n  vmImage: 'ubuntu-latest'\n\nsteps:\n- task: GoTool@0\n  inputs:\n    version: '1.24'\n\n- script: |\n    go install github.com/terratags/terratags@latest\n    terratags -config config.yaml -dir ./terraform\n  displayName: 'Validate Tags'\n</code></pre>"},{"location":"ci-cd/#jenkins","title":"Jenkins","text":"<p>Add Terratags to your Jenkinsfile:</p> <pre><code>pipeline {\n    agent {\n        docker {\n            image 'golang:1.24'\n        }\n    }\n\n    stages {\n        stage('Validate Tags') {\n            when {\n                changeset \"**/*.tf\"\n            }\n            steps {\n                sh 'go install github.com/terratags/terratags@latest'\n                sh 'terratags -config config.yaml -dir ./terraform'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ci-cd/#circleci","title":"CircleCI","text":"<p>Add Terratags to your CircleCI configuration:</p> <pre><code>version: 2.1\njobs:\n  validate-tags:\n    docker:\n      - image: cimg/go:1.24\n    steps:\n      - checkout\n      - run:\n          name: Install Terratags\n          command: go install github.com/terratags/terratags@latest\n      - run:\n          name: Validate Tags\n          command: terratags -config config.yaml -dir ./terraform\n\nworkflows:\n  version: 2\n  terraform-workflow:\n    jobs:\n      - validate-tags:\n          filters:\n            paths:\n              - \"**/*.tf\"\n</code></pre>"},{"location":"ci-cd/#best-practices-for-cicd-integration","title":"Best Practices for CI/CD Integration","text":"<ol> <li>Fail Fast: Configure your pipeline to fail early if tag validation fails</li> <li>Generate Reports: Use the <code>-report</code> flag to generate HTML reports for each build</li> <li>Artifact Storage: Store the generated reports as build artifacts for easy access</li> <li>Selective Validation: Use path filters to only run validation when Terraform files change</li> <li>Pre-commit Hooks: Consider adding Terratags as a pre-commit hook for local validation before pushing</li> </ol>"},{"location":"ci-cd/#example-complete-github-actions-workflow","title":"Example: Complete GitHub Actions Workflow","text":"<p>Here's a more complete example for GitHub Actions that includes report generation and artifact storage:</p> <pre><code>name: Terraform Tag Validation\n\non:\n  pull_request:\n    paths:\n      - '**.tf'\n  push:\n    branches:\n      - main\n    paths:\n      - '**.tf'\n\njobs:\n  validate-tags:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: '1.24'\n\n      - name: Install Terratags\n        run: go install github.com/terratags/terratags@latest\n\n      - name: Validate Tags\n        run: terratags -config config.yaml -dir ./terraform -report tag-report.html\n\n      - name: Upload Report\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: tag-validation-report\n          path: tag-report.html\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>Terratags requires a configuration file that specifies which tags must be present on your AWS resources. This file can be in either YAML or JSON format.</p>"},{"location":"configuration/#required-tags-configuration","title":"Required Tags Configuration","text":""},{"location":"configuration/#yaml-format","title":"YAML Format","text":"<pre><code>required_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n</code></pre>"},{"location":"configuration/#json-format","title":"JSON Format","text":"<pre><code>{\n  \"required_tags\": [\n    \"Name\",\n    \"Environment\",\n    \"Owner\",\n    \"Project\"\n  ]\n}\n</code></pre>"},{"location":"configuration/#command-options","title":"Command Options","text":"<p>Terratags supports the following command-line options:</p> <ul> <li><code>-config</code>, <code>-c</code>: Path to the config file (JSON/YAML) containing required tag keys (required)</li> <li><code>-dir</code>, <code>-d</code>: Path to the Terraform directory to analyze (default: current directory)</li> <li><code>-verbose</code>, <code>-v</code>: Enable verbose output</li> <li><code>-plan</code>, <code>-p</code>: Path to Terraform plan JSON file to analyze</li> <li><code>-report</code>, <code>-r</code>: Path to output HTML report file</li> <li><code>-remediate</code>, <code>-m</code>: Show auto-remediation suggestions for non-compliant resources</li> <li><code>-exemptions</code>, <code>-e</code>: Path to exemptions file (JSON/YAML)</li> <li><code>-version</code>, <code>-V</code>: Show version information</li> </ul>"},{"location":"configuration/#configuration-best-practices","title":"Configuration Best Practices","text":"<ol> <li>Start Simple: Begin with a small set of required tags and gradually expand</li> <li>Be Consistent: Use consistent naming conventions for your tags</li> <li>Document Purpose: Include comments in your configuration files explaining the purpose of each tag</li> <li>Version Control: Keep your configuration files in version control</li> <li>Team Alignment: Ensure your team understands the tagging requirements</li> </ol>"},{"location":"default-tags/","title":"Provider Default Tags Support","text":"<p>Terratags integrates with AWS provider's <code>default_tags</code> feature. When you define default tags in your AWS provider configuration, Terratags will recognize these tags and consider them when validating resources.</p>"},{"location":"default-tags/#how-default-tags-work","title":"How Default Tags Work","text":"<ol> <li>Tags defined in the AWS provider's <code>default_tags</code> block are automatically applied to all resources created by that provider</li> <li>Terratags tracks tag inheritance from provider default_tags to individual resources</li> <li>Resources only need to specify tags not covered by default_tags</li> <li>Default tags can be overridden at the resource level if needed</li> </ol>"},{"location":"default-tags/#example-with-default-tags","title":"Example with Default Tags","text":"<pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n\n  default_tags {\n    tags = {\n      Environment = \"dev\"\n      Owner       = \"team-a\"\n      Project     = \"demo\"\n    }\n  }\n}\n\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n\n  # Only need to specify Name tag, as other required tags come from default_tags\n  tags = {\n    Name = \"example-instance\"\n  }\n}\n</code></pre> <p>In this example, the AWS instance will have all four required tags: <code>Name</code> from the resource-level tags, and <code>Environment</code>, <code>Owner</code>, and <code>Project</code> from the provider's default_tags.</p>"},{"location":"default-tags/#benefits-of-using-default-tags","title":"Benefits of Using Default Tags","text":"<ol> <li>Consistency: Ensures consistent tagging across all resources</li> <li>Reduced Duplication: Eliminates the need to repeat the same tags on every resource</li> <li>Centralized Management: Makes it easier to update tags across all resources</li> <li>Reduced Errors: Minimizes the chance of missing required tags</li> </ol>"},{"location":"default-tags/#default-tags-limitations","title":"Default Tags Limitations","text":"<ol> <li>Provider Specific: Only works with providers that support default_tags (like AWS)</li> <li>Override Behavior: Resource-level tags override default tags with the same key</li> <li>Module Awareness: When using modules, be aware of how default tags propagate</li> </ol>"},{"location":"default-tags/#best-practices","title":"Best Practices","text":"<ol> <li>Use for Common Tags: Use default_tags for tags that should be consistent across all resources</li> <li>Resource-Specific Tags: Use resource-level tags for tags that are specific to individual resources</li> <li>Documentation: Document which tags are provided by default_tags to avoid confusion</li> <li>Validation: Still use Terratags to validate that all required tags are present</li> </ol>"},{"location":"examples/","title":"Examples","text":"<p>This page provides practical examples of how to use Terratags in various scenarios.</p>"},{"location":"examples/#configuration-examples","title":"Configuration Examples","text":""},{"location":"examples/#basic-required-tags-configuration-yaml","title":"Basic Required Tags Configuration (YAML)","text":"<pre><code>required_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n</code></pre>"},{"location":"examples/#required-tags-with-descriptions-yaml","title":"Required Tags with Descriptions (YAML)","text":"<pre><code>required_tags:\n  - key: Name\n    description: \"Identifies the resource\"\n  - key: Environment\n    description: \"Deployment environment (dev, test, prod)\"\n  - key: Owner\n    description: \"Team or individual responsible for the resource\"\n  - key: Project\n    description: \"Project or application name\"\n</code></pre>"},{"location":"examples/#exemptions-configuration","title":"Exemptions Configuration","text":"<pre><code>exemptions:\n  - resource_type: aws_s3_bucket\n    resource_name: logs_bucket\n    exempt_tags: [Owner, Project]\n    reason: \"Legacy bucket used for system logs only\"\n\n  - resource_type: aws_dynamodb_table\n    resource_name: \"*\"\n    exempt_tags: [Environment]\n    reason: \"DynamoDB tables use environment from provider default_tags\"\n</code></pre>"},{"location":"examples/#terraform-examples","title":"Terraform Examples","text":""},{"location":"examples/#aws-provider-with-default-tags","title":"AWS Provider with Default Tags","text":"<pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n\n  default_tags {\n    tags = {\n      Environment = \"dev\"\n      Owner       = \"team-a\"\n      Project     = \"demo\"\n    }\n  }\n}\n</code></pre>"},{"location":"examples/#resource-with-tags","title":"Resource with Tags","text":"<pre><code>resource \"aws_instance\" \"example\" {\n  ami           = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n\n  tags = {\n    Name = \"example-instance\"\n    Environment = \"production\"\n    Owner = \"team-b\"\n    Project = \"website\"\n  }\n}\n</code></pre>"},{"location":"examples/#resource-with-default-tags","title":"Resource with Default Tags","text":"<pre><code>resource \"aws_instance\" \"example\" {\n  ami           = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n\n  # Only need to specify Name tag, as other required tags come from default_tags\n  tags = {\n    Name = \"example-instance\"\n  }\n}\n</code></pre>"},{"location":"examples/#module-with-tags","title":"Module with Tags","text":"<pre><code>module \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n  version = \"3.14.0\"\n\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  tags = {\n    Name = \"my-vpc\"\n    Environment = \"production\"\n    Owner = \"team-b\"\n    Project = \"website\"\n  }\n}\n</code></pre>"},{"location":"examples/#command-examples","title":"Command Examples","text":""},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<pre><code>terratags -config config.yaml -dir ./terraform\n</code></pre>"},{"location":"examples/#generate-html-report","title":"Generate HTML Report","text":"<pre><code>terratags -config config.yaml -dir ./terraform -report report.html\n</code></pre>"},{"location":"examples/#validate-terraform-plan","title":"Validate Terraform Plan","text":"<pre><code>terraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre>"},{"location":"examples/#show-auto-remediation-suggestions","title":"Show Auto-remediation Suggestions","text":"<pre><code>terratags -config config.yaml -dir ./terraform -remediate\n</code></pre>"},{"location":"examples/#use-exemptions","title":"Use Exemptions","text":"<pre><code>terratags -config config.yaml -dir ./terraform -exemptions exemptions.yaml\n</code></pre>"},{"location":"examples/#verbose-output","title":"Verbose Output","text":"<pre><code>terratags -config config.yaml -dir ./terraform -verbose\n</code></pre>"},{"location":"examples/#real-world-scenarios","title":"Real-World Scenarios","text":""},{"location":"examples/#scenario-1-multi-environment-deployment","title":"Scenario 1: Multi-Environment Deployment","text":"<p>For a project with multiple environments, you might have different tag requirements for each environment:</p> <pre><code># dev-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n  - Owner\n</code></pre> <pre><code># prod-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n  - CostCenter\n  - DataClassification\n</code></pre> <p>You can then validate each environment with the appropriate configuration:</p> <pre><code>terratags -config dev-config.yaml -dir ./terraform/environments/dev\nterratags -config prod-config.yaml -dir ./terraform/environments/prod\n</code></pre>"},{"location":"examples/#scenario-2-gradual-tag-implementation","title":"Scenario 2: Gradual Tag Implementation","text":"<p>When implementing tagging policies gradually, you might start with a subset of required tags and add more over time:</p> <pre><code># phase1-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n</code></pre> <pre><code># phase2-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n</code></pre> <p>You can use exemptions to gradually roll out the new requirements:</p> <pre><code># phase2-exemptions.yaml\nexemptions:\n  - resource_type: \"*\"\n    resource_name: \"*\"\n    exempt_tags: [Project]\n    reason: \"Project tag requirement being phased in\"\n</code></pre> <pre><code>terratags -config phase2-config.yaml -dir ./terraform -exemptions phase2-exemptions.yaml\n</code></pre> <p>As teams update their resources, you can remove exemptions until all resources comply with the full tagging policy.</p>"},{"location":"exemptions/","title":"Exemptions Configuration","text":"<p>Exemptions allow you to exclude specific resources or resource types from certain tag requirements. Create a YAML or JSON file with your exemptions.</p>"},{"location":"exemptions/#exemption-fields","title":"Exemption Fields","text":"<ul> <li><code>resource_type</code>: The AWS resource type (e.g., aws_s3_bucket, aws_instance)</li> <li><code>resource_name</code>: The name of the specific resource to exempt. Use \"*\" to exempt all resources of the specified type</li> <li><code>exempt_tags</code>: List of tags that are not required for this resource</li> <li><code>reason</code>: A description explaining why this exemption exists</li> </ul>"},{"location":"exemptions/#yaml-example","title":"YAML Example","text":"<pre><code>exemptions:\n  - resource_type: aws_s3_bucket\n    resource_name: logs_bucket\n    exempt_tags: [Owner, Project]\n    reason: \"Legacy bucket used for system logs only\"\n\n  - resource_type: aws_dynamodb_table\n    resource_name: \"*\"\n    exempt_tags: [Environment]\n    reason: \"DynamoDB tables use environment from provider default_tags\"\n</code></pre>"},{"location":"exemptions/#json-example","title":"JSON Example","text":"<pre><code>{\n  \"exemptions\": [\n    {\n      \"resource_type\": \"aws_s3_bucket\",\n      \"resource_name\": \"logs_bucket\",\n      \"exempt_tags\": [\"Owner\", \"Project\"],\n      \"reason\": \"Legacy bucket used for system logs only\"\n    },\n    {\n      \"resource_type\": \"aws_dynamodb_table\",\n      \"resource_name\": \"*\",\n      \"exempt_tags\": [\"Environment\"],\n      \"reason\": \"DynamoDB tables use environment from provider default_tags\"\n    }\n  ]\n}\n</code></pre>"},{"location":"exemptions/#when-to-use-exemptions","title":"When to Use Exemptions","text":"<p>Exemptions are useful in several scenarios:</p> <ol> <li>Legacy Resources: Older resources that cannot be easily updated</li> <li>Special Purpose Resources: Resources with a specific purpose that don't fit the standard tagging model</li> <li>Resource Limitations: Some AWS resources have limitations on tagging</li> <li>Default Tag Inheritance: Resources that inherit tags from other sources</li> </ol>"},{"location":"exemptions/#best-practices-for-exemptions","title":"Best Practices for Exemptions","text":"<ol> <li>Document Reasons: Always include a clear reason for each exemption</li> <li>Regular Review: Periodically review exemptions to see if they're still necessary</li> <li>Minimize Use: Use exemptions sparingly to maintain consistent tagging</li> <li>Specific Scope: Make exemptions as specific as possible (prefer specific resource names over wildcards)</li> <li>Version Control: Keep your exemptions file in version control</li> </ol>"},{"location":"installation/","title":"Installation","text":"<p>Terratags can be installed in multiple ways. You don't need to have Go installed to use Terratags.</p>"},{"location":"installation/#binary-installation-recommended","title":"Binary Installation (Recommended)","text":"<p>The easiest way to install Terratags is to download a pre-built binary from the GitHub Releases page:</p> <ol> <li>Download the appropriate binary for your operating system (Windows, macOS, or Linux)</li> <li>Extract the archive if necessary</li> <li>Move the binary to a directory in your PATH</li> </ol>"},{"location":"installation/#linuxmacos","title":"Linux/macOS","text":"<pre><code># Example for Linux amd64\ncurl -L https://github.com/terratags/terratags/releases/latest/download/terratags_linux_amd64.tar.gz | tar xz\nsudo mv terratags /usr/local/bin/\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<p>Download the appropriate .zip file from the releases page, extract it, and add the location to your PATH.</p>"},{"location":"installation/#go-installation-alternative","title":"Go Installation (Alternative)","text":"<p>If you have Go installed, you can also install Terratags using Go's package manager:</p> <pre><code>go install github.com/terratags/terratags@latest\n</code></pre> <p>This will download and install the latest version of Terratags to your Go bin directory.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Terraform (for analyzing Terraform configurations)</li> </ul>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, you can verify that Terratags is installed correctly by running:</p> <pre><code>terratags -version\n</code></pre> <p>This should display the current version of Terratags.</p>"},{"location":"installation/#building-from-source","title":"Building from Source","text":"<p>If you prefer to build from source:</p> <pre><code>git clone https://github.com/terratags/terratags.git\ncd terratags\ngo build\n</code></pre> <p>This will create a <code>terratags</code> binary in your current directory.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation, you'll need to:</p> <ol> <li>Create a configuration file that defines your required tags</li> <li>Run Terratags against your Terraform code</li> <li>Review the results and fix any non-compliant resources</li> </ol>"},{"location":"usage/","title":"Usage","text":"<p>Terratags can be used in various ways to validate tags on AWS resources in your Terraform configurations.</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<p>The basic usage of Terratags is:</p> <pre><code>terratags -config config.yaml -dir ./terraform\n</code></pre> <p>This command will analyze all Terraform files in the specified directory and validate that AWS resources have the required tags as defined in your configuration file.</p>"},{"location":"usage/#command-examples","title":"Command Examples","text":""},{"location":"usage/#generate-html-report","title":"Generate HTML Report","text":"<p>Generate a detailed HTML report of tag compliance:</p> <pre><code>terratags -config config.yaml -dir ./terraform -report report.html\n</code></pre>"},{"location":"usage/#validate-terraform-plan","title":"Validate Terraform Plan","text":"<p>Validate tags in a Terraform plan output:</p> <pre><code>terraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre>"},{"location":"usage/#show-auto-remediation-suggestions","title":"Show Auto-remediation Suggestions","text":"<p>Get suggestions for fixing non-compliant resources:</p> <pre><code>terratags -config config.yaml -dir ./terraform -remediate\n</code></pre>"},{"location":"usage/#use-exemptions","title":"Use Exemptions","text":"<p>Apply exemptions to specific resources:</p> <pre><code>terratags -config config.yaml -dir ./terraform -exemptions exemptions.yaml\n</code></pre>"},{"location":"usage/#verbose-output","title":"Verbose Output","text":"<p>For more detailed output, use the <code>-verbose</code> flag:</p> <pre><code>terratags -config config.yaml -dir ./terraform -verbose\n</code></pre> <p>This will show additional information about the validation process, including:</p> <ul> <li>Files being analyzed</li> <li>Resources being checked</li> <li>Tag inheritance from default_tags</li> <li>Exemptions being applied</li> </ul>"},{"location":"usage/#exit-codes","title":"Exit Codes","text":"<p>Terratags uses the following exit codes:</p> <ul> <li><code>0</code>: All resources are compliant with tagging requirements</li> <li><code>1</code>: One or more resources are missing required tags</li> <li><code>2</code>: Error in configuration or execution</li> </ul> <p>This makes it easy to integrate Terratags into CI/CD pipelines and fail builds when tag requirements are not met.</p>"},{"location":"usage/#working-with-large-codebases","title":"Working with Large Codebases","text":"<p>For large Terraform codebases, you can:</p> <ol> <li> <p>Run Terratags on specific directories:    <pre><code>terratags -config config.yaml -dir ./terraform/modules/networking\n</code></pre></p> </li> <li> <p>Use the plan-based approach to only validate resources that are changing:    <pre><code>terraform plan -out=tfplan -target=module.networking\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre></p> </li> </ol>"},{"location":"usage/#html-reports","title":"HTML Reports","text":"<p>The HTML report provides a visual representation of tag compliance across your Terraform resources, making it easy to identify which resources need attention and track compliance metrics.</p> <p>To generate a report:</p> <pre><code>terratags -config config.yaml -dir ./terraform -report report.html\n</code></pre> <p>The report includes:</p> <ul> <li>Overall compliance percentage</li> <li>List of compliant and non-compliant resources</li> <li>Missing tags for each non-compliant resource</li> <li>Summary statistics</li> </ul>"}]}